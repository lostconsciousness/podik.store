import os
import django

os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"
os.environ.setdefault("DJANGO_SETTINGS_MODULE","pods.settings")
django.setup()

from aiogram import executor, Bot, Dispatcher, types
from aiogram.utils.deep_linking import get_start_link
from newpost import areas_centers_names, find_warehouse
import requests
import json
import string
import random
from main.models import Offers, Users, Areas_and_costs
from test import to_sales_drive
import barcode
from barcode.writer import ImageWriter
import io
from django.db.models.signals import post_save
from django.dispatch import receiver

token = "6075679825:AAGrgD6b9hybk9EoNue44k1ZPW8paFJCs5M"

telegram_id = []

bot = Bot(token)
dp = Dispatcher(bot)



@dp.message_handler(commands=['start'])
async def start_fun(message: types.Message):
    Users.objects.all()
    existing_user = Users.objects.filter(username=message.from_user.username).first()
    if len(message.text.split())!=1:
        if not existing_user:
            referral_id = message.text.split()[1]
            Users.objects.all().filter(tg_id=referral_id).update(referral_count = int(Users.objects.all().filter(tg_id=referral_id)[0].referral_count)+1)
            await bot.send_message(message.from_user.id,"–í–∏ –ø—ñ–¥'—î–¥–Ω–∞–ª–∏—Å—å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–º –∫–æ–¥–æ–º!")
            await bot.send_message(referral_id, "–ó–∞ –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–º –∫–æ–¥–æ–º –ø—ñ–¥'—î–¥–Ω–∞–≤—Å—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á!")
    print(message.from_user.username+": "+ message.text)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kbbutton1 = types.KeyboardButton(text = "–¢–∞–∫, –º–µ–Ω—ñ —î 18 —Ä–æ–∫—ñ–≤.")
    kbbutton2 = types.KeyboardButton(text = "–ù—ñ, –º–µ–Ω—ñ —â–µ –Ω–µ–º–∞—î 18 —Ä–æ–∫—ñ–≤.")
    keyboard.add(kbbutton1, kbbutton2)
    await message.answer('–í–∞—Å –≤—ñ—Ç–∞—î –±–æ—Ç –∑ –ø—Ä–æ–¥–∞–∂—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏—Ö —Å–∏–≥–∞—Ä–µ—Ç! –ß–∏ —î –≤–∞–º 18 —Ä–æ–∫—ñ–≤? ', reply_markup=keyboard) 

@dp.message_handler(lambda message: message.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞ –º–∏–Ω—É–ª–∏–π –∫—Ä–æ–∫.")
async def startagain(message:types.Message):
    print(message.from_user.username+": "+ message.text)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kbbutton1 = types.KeyboardButton(text = "–¢–∞–∫, –º–µ–Ω—ñ —î 18 —Ä–æ–∫—ñ–≤.")
    kbbutton2 = types.KeyboardButton(text = "–ù—ñ, –º–µ–Ω—ñ —â–µ –Ω–µ–º–∞—î 18 —Ä–æ–∫—ñ–≤.")
    keyboard.add(kbbutton1, kbbutton2)
    await message.answer('–í–∞—Å –≤—ñ—Ç–∞—î –±–æ—Ç –∑ –ø—Ä–æ–¥–∞–∂—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏—Ö —Å–∏–≥–∞—Ä–µ—Ç! –ß–∏ —î –≤–∞–º 18 —Ä–æ–∫—ñ–≤? ', reply_markup=keyboard) 

@dp.message_handler(lambda message: message.text == "–ù—ñ, –º–µ–Ω—ñ —â–µ –Ω–µ–º–∞—î 18 —Ä–æ–∫—ñ–≤.")
async def no18(message:types.Message):
    print(message.from_user.username+": "+ message.text)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kbbutton1 = types.KeyboardButton(text = "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞ –º–∏–Ω—É–ª–∏–π –∫—Ä–æ–∫.")
    keyboard.add(kbbutton1)
    await message.answer('–ü—Ä–æ–¥–∞–∂ –Ω–∞—à–æ—ó –ø—Ä–æ–¥—É–∫—Ü—ñ—ó –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π –ª–∏—à–µ –ª—é–¥—è–º —â–æ –¥–æ—Å—è–≥–ª–∏ –ø–æ–≤–Ω–æ–ª—ñ—Ç—Ç—è.', reply_markup=keyboard) 

@dp.message_handler(lambda message: message.text == '–¢–∞–∫, –º–µ–Ω—ñ —î 18 —Ä–æ–∫—ñ–≤.') 
async def start_fun(message: types.Message):
    print(message.from_user.username+": "+ message.text)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kbbutton1 = types.KeyboardButton(text = "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É.", request_contact=True)
    keyboard.add(kbbutton1)
    await message.answer('–ù–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ', reply_markup=keyboard)

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def qq(message:types.Message):
    Users.objects.all()
    existing_user = Users.objects.filter(username=message.from_user.username).first()
    if not existing_user:
        user = Users(
            username=message.from_user.username,
            phone_number=message.contact.phone_number,
            name=message.from_user.first_name,
            tg_id = message.from_id,
            referral_count = 0,
        )
        user.save()
    print(message.from_user.username+": "+ message.contact.phone_number)
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text = "Site", web_app = types.WebAppInfo(url=f"https://general2286.pythonanywhere.com/{message.from_id}"))],
            [types.KeyboardButton(text = "–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞"), types.KeyboardButton(text = "–ó–≤ º—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏")],
            [types.KeyboardButton(text = "–ö–∞—Ä—Ç–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"), types.KeyboardButton(text = "–ó–Ω–∞–π—Ç–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–π –º–∞–≥–∞–∑–∏–Ω")],
            [types.KeyboardButton(text = "–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")],
        ],
        resize_keyboard=True
    )
    reply_markup = types.InlineKeyboardMarkup()
    reply_markup.row(
        types.InlineKeyboardButton(
            text="–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É",
            web_app=types.WebAppInfo(url=f"https://general2286.pythonanywhere.com/{message.from_id}"),
        )
    )
    await bot.send_message(
        message.from_user.id,
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É' —Ç–∞ –≤—ñ–¥–∫—Ä–∏—î—Ç—å—Å—è –Ω–∞—à —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω.",
        reply_markup=keyboard,
    )

@dp.message_handler(lambda message: message.text == "–ó–≤ º—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏")
async def my_orders(message: types.Message):
    print(message.from_user.username+": "+ message.text)
    await bot.send_message(message.from_user.id, """üí¨ –û–Ω–ª–∞–π–Ω-—á–∞—Ç:

Telegram - https://t.me/UVAPE_SUPPORT_bot
Viber - https://tinyurl.com/y4ur6pw8

üìû –ó–≤‚Äô—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º:

+38 (093) 323 7887
+38 (096) 323 7887
+38 (099) 323 7887""")
    
@dp.message_handler(lambda message: message.text == "–ó–Ω–∞–π—Ç–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–π –º–∞–≥–∞–∑–∏–Ω")
async def my_orders(message: types.Message):
    print(message.from_user.username+": "+ message.text)
    reply_markup = types.InlineKeyboardMarkup()
    reply_markup.row(
        types.InlineKeyboardButton(
            text="–ù–∞–π–±–ª–∏–∂—á–∏–π –º–∞–≥–∞–∑–∏–Ω",
            web_app=types.WebAppInfo(url="https://uvape.pro/contact-us#adrshop"),
        )
    )
    await bot.send_message(message.from_id,text="–ù–∞–π–±–ª–∏–∂—á–∏–π –º–∞–≥–∞–∑–∏–Ω –í–∏ –º–æ–∂–µ—Ç–µ –∑–Ω–∞–π—Ç–∏ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:", reply_markup=reply_markup) 

@dp.message_handler(lambda message: message.text == "–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
async def my_orders(message: types.Message):
    print(message.from_user.username+": "+ message.text)
    offers = Offers.objects.all().filter(tg_id = message.from_id)
    order_str=""
    i = 1
    for order in offers:
        try:
            order_str+=f"\n{i})–ó–∞–∫–∞–∑ {order.id}"+"\n"+order.offer+f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {order.amount}\n–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:\n–¢–¢–ù: "+order.novapost_en
        except:
            order_str+=f"\n{i})–ó–∞–∫–∞–∑ {order.id}"+"\n"+order.offer+f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {order.amount}\n–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:"
        i = i + 1
    await bot.send_message(message.from_user.id, "–ú–æ–∏ –∑–∞–∫–∞–∑—ã:"+order_str)

@dp.message_handler(lambda message: message.text == "–ö–∞—Ä—Ç–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
async def client_card(message: types.Message):
    print(message.from_user.username+": "+ message.text)
    # code = "yourcardnumber"
    code = str(message.from_user.id)
    buf = io.BytesIO()
    code_bar=barcode.Code39(code, writer=ImageWriter(), add_checksum=False)
    code_bar.write(buf)
    buf.seek(0)
    await bot.send_photo(message.from_user.id, buf, f"–í–∞—à–∞ –±–æ–Ω—É—Å–Ω–∞—è –∫–∞—Ä—Ç–∞\n–í–∞—à –∫–µ—à–±–µ–∫: {get_cashback(message.from_user.id)}")

@dp.message_handler(lambda message: message.text == "–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞")
async def invite(message:types.Message):
    print(message.from_user.username+": "+ message.text)
    await bot.send_message(message.from_user.id,f"–ó–∞–ø—Ä–æ—Å—ñ—Ç—å –¥—Ä—É–≥–∞ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: ", reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—Å—è", url=f"https://t.me/share/url?url=https://t.me/ecigtestbot?start={message.from_user.id}")))



@dp.message_handler(commands = ['pay'])
async def payment(message:types.Message):
    #print(message.from_user.username+": "+ message.contact.phone_number)
    print(int(message.text.split(" ")[1]))
    w4purl = "https://api.wayforpay.com/api"
    allObjects = ['–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è —Å–∏–≥–∞—Ä–µ—Ç–∞ Airis Lux P5000 Pina Colada', '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è —Å–∏–≥–∞—Ä–µ—Ç–∞ R&M Legend 10000 –∑–∞—Ç—è–∂–µ–∫ Big Bang Fruit', '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å–∏–≥–∞—Ä–µ—Ç–∞ Joyetech VAAL MAX Lush Ice', '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å–∏–≥–∞—Ä–µ—Ç–∞ Joyetech VAAL GLAZ6500 Passion Fruit Orange Guava', '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å–∏–≥–∞—Ä–µ—Ç–∞ Joyetech VAAL EP4500 Cotton Candy', '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å–∏–≥–∞—Ä–µ—Ç–∞ Joyetech VAAL EP4500 Peach Mango Watermelon', '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è —Å–∏–≥–∞—Ä–µ—Ç–∞ Elf Bar BC3500 3500 –∑–∞—Ç—è–∂–µ–∫ Cranberry Grape', 'Chaser Salt for Pods 15 –º–ª 50 –º–≥ (5.0%) Bali Triple Shot', 'Chaser Salt - Blackcurrant Menthol (–ß–µ—Ä–Ω–∞—è —Å–º–æ—Ä–æ–¥–∏–Ω–∞ —Å –º–µ–Ω—Ç–æ–ª–æ–º) 10–º–ª 30 –º–≥ (3.0%)', '3Ger Salt 15 –º–ª 35 –º–≥ (3,5%) Apple Caramel']
    random_elements = random.sample(allObjects, 5)
    new=[]
    for i in random_elements:
        i = i.replace("%", "")
        new.append(i)
    print(new)
    j = ""
    with open('txt.txt', 'r', encoding ='utf-8') as f:
        j = f.readline()
    data = {
    "transactionType":"CREATE_INVOICE",
    "merchantAccount":"test_merch_n1",
    "merchantAuthType":"SimpleSignature",
    "merchantDomainName":"www.market.ua",
    # "merchantSignature":"60c5d743b71f79abe48c7183ada4b451",
    "apiVersion":1,
    "language":"ru",
    "serviceUrl":"https://eovbu9r2zfhhsp8.m.pipedream.net",
    "orderReference":"DH18799397" + str(j),
    "orderDate":1415379863,
    "amount":int(message.text.split(" ")[1]),
    "currency":"UAH",
    "orderTimeout": 60,
    "productName": new,
    "productPrice":[1000,547, 432, 234, 324],
    "productCount":[1,1, 1,1,1],
    "paymentSystems": "card;privat24",
    "clientFirstName":"Bulba",
    "clientLastName":"Taras",
    "clientEmail":"rob@mail.com",
    "clientPhone":"380556667788"
    }
    print(type(j))
    print(j)
    j= int(j)+1
    with open('txt.txt', 'w') as f:
        f.write(str(j))
    # response=requests.get(f'https://wiki.wayforpay.com/wiki/default/generate-hmac?string=test_merch_n1%3Bwww.market.ua%3BDH1679956997%3B1415379863%3B158%3BUAH%3B%D0%9F%D1%80%D0%BE%D1%86%D0%B5%D1%81%D1%81%D0%BE%D1%80%20Intel%20Core%20i5-4670%203.4GHz%3B%D0%9F%D0%B0%D0%BC%D1%8F%D1%82%D1%8C%20Kingston%20DDR3-1600%204096MB%  productPrice   20PC3-12800%3B1%3B1%3B1000%3B547&key=flk3409refn54t54t*FNJRET')
    def create_signature(data:dict):
        print(f'https://wiki.wayforpay.com/wiki/default/generate-hmac?string={data["merchantAccount"]}%3B{data["merchantDomainName"]}%3B{data["orderReference"]}%3B{data["orderDate"]}%3B{data["amount"]}%3B{data["currency"]}%3B{"%3B".join(data["productName"])}%3B{"%3B".join(str(i) for i in data["productCount"])}%3B{"%3B".join(str(i) for i in data["productPrice"])}&key=flk3409refn54t54t*FNJRET')
        response=requests.get(f'https://wiki.wayforpay.com/wiki/default/generate-hmac?string={data["merchantAccount"]}%3B{data["merchantDomainName"]}%3B{data["orderReference"]}%3B{data["orderDate"]}%3B{data["amount"]}%3B{data["currency"]}%3B{"%3B".join(data["productName"])}%3B{"%3B".join(str(i) for i in data["productCount"])}%3B{"%3B".join(str(i) for i in data["productPrice"])}&key=flk3409refn54t54t*FNJRET')
        return response.text
    signature=create_signature(data)
    data["merchantSignature"]=signature
    print(w4purl)

    response = requests.post(w4purl, json.dumps(data))
    print(response.text)
    json_obj = json.loads(response.text)
    w4purl = json_obj["invoiceUrl"].replace("\\","")
    reply_markup = types.InlineKeyboardMarkup()
    reply_markup.row(
        types.InlineKeyboardButton(
            text="–°–ø–ª–∞—Ç–∏—Ç–∏",
            url=w4purl,
        )
    )
    await message.answer(text = "–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É —Å–ø–ª–∞—Ç–∏", reply_markup=reply_markup)

import mysql.connector

config={
        "password": "Trnn06771588990",
        "host": "database-2.ctng339lkkzz.eu-north-1.rds.amazonaws.com",
        "user": "admin",
        "port":"3306",
        "database": "db",
        }


def get_cashback(tg_id):
    base = mysql.connector.connect(**config)
    cur = base.cursor()
    cur.execute("SELECT cashback_amount FROM main_users WHERE tg_id=%(tg_id)s",{"tg_id":tg_id})
    res= cur.fetchall()[0][0]
    return res

@dp.message_handler(content_types=types.ContentType.ANY)
async def spec(message:types.Message):
    print(message.from_id)
    try:
        j = ""
        with open('txt.txt', 'r', encoding ='utf-8') as f:
            j = f.readline()
        Offers.objects.all()
        user_info = json.loads(message.web_app_data.data)
        
        offer = Offers(
            username = message.from_user.username,
            offer = user_info['offer'],
            amount = str(int(user_info['amount'].split(' ')[0])),
            name = user_info['name'],
            phone_number = user_info['phone_number'].replace("(","").replace(")","").replace("-","").replace("+",""),
            call = user_info['call'],
            area = user_info['area'],
            city = user_info['city'],
            warehouse = user_info['warehouse'],
            products = user_info['products'],
            delivery_method = user_info['delivery_method'],
            comment = user_info['comment'],
            payment_method = user_info['payment_method'],
            offer_id = j,
            tg_id = message.from_id
                        )
        offer.save()

        to_sales_drive()
        print(offer.call)

        await message.answer(text ="–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: "+str(offer.id)+"\n"+json.loads(message.web_app_data.data)['message'])
        await message.answer(text =str(int(user_info['amount'].split(' ')[0])))
        if user_info['payment_method'] == "–ö–∞—Ä—Ç–∫–æ—é –æ–Ω–ª–∞–π–Ω":
            productName = []
            productName.append(user_info['products'].split('-')[0])
            w4purl = "https://api.wayforpay.com/api"
            j = ""
            with open('txt.txt', 'r', encoding ='utf-8') as f:
                j = f.readline()
            data = {
            "transactionType":"CREATE_INVOICE",
            "merchantAccount":"test_merch_n1",
            "merchantAuthType":"SimpleSignature",
            "merchantDomainName":"www.market.ua",
            # "merchantSignature":"60c5d743b71f79abe48c7183ada4b451",
            "apiVersion":1,
            "language":"ru",
            "serviceUrl":"https://eovbu9r2zfhhsp8.m.pipedream.net",
            "orderReference":"DH18799378" + str(j),
            "orderDate":1415379863,
            "amount": int(user_info['amount'].replace("UAH","")),
            "currency":"UAH",
            "orderTimeout": 60,
            "productName": productName,
            "productPrice":[1000],
            "productCount":[1],
            "paymentSystems": "card;privat24",
            "clientFirstName":"user_info['name']",
            "clientPhone":user_info['phone_number']
            }
            print(type(j))
            print(j)
            j= int(j)+1
            with open('txt.txt', 'w') as f:
                f.write(str(j))
            # response=requests.get(f'https://wiki.wayforpay.com/wiki/default/generate-hmac?string=test_merch_n1%3Bwww.market.ua%3BDH1679956997%3B1415379863%3B158%3BUAH%3B%D0%9F%D1%80%D0%BE%D1%86%D0%B5%D1%81%D1%81%D0%BE%D1%80%20Intel%20Core%20i5-4670%203.4GHz%3B%D0%9F%D0%B0%D0%BC%D1%8F%D1%82%D1%8C%20Kingston%20DDR3-1600%204096MB%  productPrice   20PC3-12800%3B1%3B1%3B1000%3B547&key=flk3409refn54t54t*FNJRET')
            def create_signature(data:dict):
                print(f'https://wiki.wayforpay.com/wiki/default/generate-hmac?string={data["merchantAccount"]}%3B{data["merchantDomainName"]}%3B{data["orderReference"]}%3B{data["orderDate"]}%3B{data["amount"]}%3B{data["currency"]}%3B{"%3B".join(data["productName"])}%3B{"%3B".join(str(i) for i in data["productCount"])}%3B{"%3B".join(str(i) for i in data["productPrice"])}&key=flk3409refn54t54t*FNJRET')
                response=requests.get(f'https://wiki.wayforpay.com/wiki/default/generate-hmac?string={data["merchantAccount"]}%3B{data["merchantDomainName"]}%3B{data["orderReference"]}%3B{data["orderDate"]}%3B{data["amount"]}%3B{data["currency"]}%3B{"%3B".join(data["productName"])}%3B{"%3B".join(str(i) for i in data["productCount"])}%3B{"%3B".join(str(i) for i in data["productPrice"])}&key=flk3409refn54t54t*FNJRET')
                return response.text
            signature=create_signature(data)
            data["merchantSignature"]=signature
            print(w4purl)

            response = requests.post(w4purl, json.dumps(data))
            print(response.text)
            json_obj = json.loads(response.text)
            w4purl = json_obj["invoiceUrl"].replace("\\","")
            reply_markup = types.InlineKeyboardMarkup()
            reply_markup.row(
                types.InlineKeyboardButton(
                    text="–°–ø–ª–∞—Ç–∏—Ç–∏",
                    url=w4purl,
                )
            )
            await message.answer(text = "–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É —Å–ø–ª–∞—Ç–∏", reply_markup=reply_markup)
            j = int(j)+1
            with open('txt.txt', 'w') as f:
                f.write(str(j))
    except:
        print("sosunok")
        print(message.from_user.username+": "+ message.text)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
